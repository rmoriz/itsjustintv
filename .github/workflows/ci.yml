name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out ./...

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5'
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        COMMIT=$(git rev-parse HEAD)
        BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        go build -ldflags "-s -w -X github.com/rmoriz/itsjustintv/internal/cli.Version=${VERSION} -X github.com/rmoriz/itsjustintv/internal/cli.GitCommit=${COMMIT} -X github.com/rmoriz/itsjustintv/internal/cli.BuildDate=${BUILD_DATE}" -o itsjustintv-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/itsjustintv

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: itsjustintv-${{ matrix.goos }}-${{ matrix.goarch }}
        path: itsjustintv-${{ matrix.goos }}-${{ matrix.goarch }}

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Download all binary artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Move binaries
      run: |
        find artifacts -type f -name "itsjustintv-linux-*" -exec mv {} . \;

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move and rename binaries
        run: |
          mkdir release-assets
          find artifacts -type f -name "itsjustintv-*" | while read -r file; do
            mv "$file" release-assets/
          done

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          tag_name: ${{ github.ref }}
          name: ${{ github.ref }}
          body: "Automated release for ${{ github.ref }}"
          draft: false
          prerelease: false
