name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out ./...
    
    - name: Run linter
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.2.2

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: arm64
            suffix: darwin-aarch64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5'
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        COMMIT=$(git rev-parse HEAD)
        BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        go build -ldflags "-s -w -X github.com/rmoriz/itsjustintv/internal/cli.Version=${VERSION} -X github.com/rmoriz/itsjustintv/internal/cli.GitCommit=${COMMIT} -X github.com/rmoriz/itsjustintv/internal/cli.BuildDate=${BUILD_DATE}" -o itsjustintv-${{ matrix.suffix }} ./cmd/itsjustintv
    
    - name: Upload binary
      uses: softprops/action-gh-release@v2
      with:
        files: ./itsjustintv-${{ matrix.suffix }}

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v4
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v7
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}